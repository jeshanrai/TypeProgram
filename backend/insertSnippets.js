require('dotenv').config();
const { MongoClient } = require('mongodb');

const uri = process.env.MONGO_URI;
const dbName = process.env.DB_NAME;

const client = new MongoClient(uri);

const snippets = [

  // JavaScript (50 snippets)
//   { "language": "javascript", "code": "const calculateCircleArea = radius => Math.PI * Math.pow(radius, 2); // Returns the area of a circle given its radius" },
//   { "language": "javascript", "code": "const generateRandomHexColor = () => `#${Math.floor(Math.random()*16777215).toString(16).padStart(6,'0')}`; // Random hex color" },
//   { "language": "javascript", "code": "const formatCurrency = (amount, locale='en-US', currency='USD') => new Intl.NumberFormat(locale, {style:'currency',currency}).format(amount);" },
//   { "language": "javascript", "code": "const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); } }" },
//   { "language": "javascript", "code": "const deepCloneObject = obj => JSON.parse(JSON.stringify(obj)); // Creates a deep clone of any serializable object" },
//   { "language": "javascript", "code": "const getQueryParams = () => Object.fromEntries(new URLSearchParams(window.location.search).entries()); // Parses URL query params" },
//   { "language": "javascript", "code": "const isPalindrome = str => str === str.split('').reverse().join(''); // Checks if string reads same forwards/backwards" },
//   { "language": "javascript", "code": "const chunkArray = (arr, size) => Array.from({length: Math.ceil(arr.length/size)}, (_,i) => arr.slice(i*size, i*size+size));" },
//   { "language": "javascript", "code": "const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); } }" },
//   { "language": "javascript", "code": "const throttle = (func, limit) => { let lastFunc; let lastRan; return function() { const context = this; const args = arguments; if (!lastRan) { func.apply(context, args); lastRan = Date.now(); } else { clearTimeout(lastFunc); lastFunc = setTimeout(function() { if ((Date.now() - lastRan) >= limit) { func.apply(context, args); lastRan = Date.now(); } }, limit - (Date.now() - lastRan)); } } }" },
//   { "language": "javascript", "code": "const countVowels = str => str.match(/[aeiou]/gi)?.length || 0; // Counts vowels in a string (case insensitive)" },
//   { "language": "javascript", "code": "const truncateString = (str, max) => str.length > max ? `${str.substring(0, max)}...` : str; // Truncates with ellipsis" },
//   { "language": "javascript", "code": "const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min; // Random int in range" },
//   { "language": "javascript", "code": "const removeDuplicates = arr => [...new Set(arr)]; // Removes duplicate values from array" },
//   { "language": "javascript", "code": "const capitalizeWords = str => str.replace(/\\b\\w/g, char => char.toUpperCase()); // Capitalizes each word" },
//   { "language": "javascript", "code": "const flattenArray = arr => arr.flat(Infinity); // Flattens nested arrays to any depth" },
//   { "language": "javascript", "code": "const sortObjectsByKey = (arr, key) => [...arr].sort((a,b) => a[key] > b[key] ? 1 : -1); // Sorts array of objects" },
//   { "language": "javascript", "code": "const groupBy = (arr, key) => arr.reduce((acc, obj) => { const prop = obj[key]; acc[prop] = acc[prop] || []; acc[prop].push(obj); return acc; }, {});" },
//   { "language": "javascript", "code": "const isAnagram = (str1, str2) => cleanString(str1) === cleanString(str2); const cleanString = str => str.replace(/[^\\w]/g,'').toLowerCase().split('').sort().join('');" },
//   { "language": "javascript", "code": "const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x); // Functional programming pipe" },
//   { "language": "javascript", "code": "const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x); // Functional programming compose" },
//   { "language": "javascript", "code": "const sleep = ms => new Promise(resolve => setTimeout(resolve, ms)); // Async sleep function" },
//   { "language": "javascript", "code": "const getDaysBetweenDates = (date1, date2) => Math.abs(new Date(date1) - new Date(date2)) / (1000 * 60 * 60 * 24);" },
//   { "language": "javascript", "code": "const toCamelCase = str => str.replace(/[-_](.)/g, (_, c) => c.toUpperCase()); // Converts to camelCase" },
//   { "language": "javascript", "code": "const toSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`); // Converts to snake_case" },
//   { "language": "javascript", "code": "const toKebabCase = str => str.replace(/[A-Z]/g, letter => `-${letter.toLowerCase()}`); // Converts to kebab-case" },
//   { "language": "javascript", "code": "const invertObject = obj => Object.fromEntries(Object.entries(obj).map(([k,v]) => [v,k])); // Swaps keys/values" },
//   { "language": "javascript", "code": "const pick = (obj, ...keys) => Object.fromEntries(keys.filter(k => k in obj).map(k => [k, obj[k]])); // Picks object properties" },
//   { "language": "javascript", "code": "const omit = (obj, ...keys) => Object.fromEntries(Object.entries(obj).filter(([k]) => !keys.includes(k))); // Omits object properties" },
//   { "language": "javascript", "code": "const getNestedValue = (obj, path) => path.split('.').reduce((acc, part) => acc && acc[part], obj); // Safe nested access" },
//   { "language": "javascript", "code": "const mergeObjects = (...objs) => Object.assign({}, ...objs); // Merges multiple objects" },
//   { "language": "javascript", "code": "const deepEqual = (a, b) => JSON.stringify(a) === JSON.stringify(b); // Simple deep equality check" },
//   { "language": "javascript", "code": "const shuffleArray = arr => [...arr].sort(() => Math.random() - 0.5); // Randomly shuffles array" },
//   { "language": "javascript", "code": "const sample = arr => arr[Math.floor(Math.random() * arr.length)]; // Gets random array element" },
//   { "language": "javascript", "code": "const average = arr => arr.reduce((a, b) => a + b, 0) / arr.length; // Calculates average" },
//   { "language": "javascript", "code": "const median = arr => { const mid = Math.floor(arr.length/2), nums = [...arr].sort((a,b)=>a-b); return arr.length%2!==0?nums[mid]:(nums[mid-1]+nums[mid])/2; };" },
//   { "language": "javascript", "code": "const mode = arr => { const counts = arr.reduce((a, b) => { a[b] = (a[b] || 0) + 1; return a; }, {}); return Object.keys(counts).reduce((a, b) => counts[a] > counts[b] ? a : b); };" },
//   { "language": "javascript", "code": "const percentile = (arr, p) => { const sorted = [...arr].sort((a,b)=>a-b); const pos = (sorted.length-1)*p; const base=Math.floor(pos); const rest=pos-base; if(base+1<sorted.length) return sorted[base]+rest*(sorted[base+1]-sorted[base]); return sorted[base]; };" },
//   { "language": "javascript", "code": "const factorial = n => n <= 1 ? 1 : n * factorial(n - 1); // Recursive factorial" },
//   { "language": "javascript", "code": "const fibonacci = n => n <= 1 ? n : fibonacci(n - 1) + fibonacci(n - 2); // Recursive Fibonacci" },
//   { "language": "javascript", "code": "const gcd = (a, b) => b === 0 ? a : gcd(b, a % b); // Greatest common divisor (recursive)" },
//   { "language": "javascript", "code": "const lcm = (a, b) => (a * b) / gcd(a, b); // Least common multiple" },
//   { "language": "javascript", "code": "const isPrime = num => { for(let i=2, s=Math.sqrt(num); i<=s; i++) if(num%i===0) return false; return num>1; }" },
//   { "language": "javascript", "code": "const primeFactors = n => { const factors=[]; let divisor=2; while(n>=2) { if(n%divisor===0) { factors.push(divisor); n/=divisor; } else divisor++; } return factors; };" },
//   { "language": "javascript", "code": "const isEven = n => n % 2 === 0; // Checks if number is even" },
//   { "language": "javascript", "code": "const isOdd = n => Math.abs(n % 2) === 1; // Checks if number is odd" },
//   { "language": "javascript", "code": "const randomString = length => Array(length).fill(0).map(() => Math.random().toString(36).charAt(2)).join('');" },
//   { "language": "javascript", "code": "const hexToRgb = hex => hex.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, (m,r,g,b) => `#${r}${r}${g}${g}${b}${b}`).substring(1).match(/.{2}/g).map(x=>parseInt(x,16));" },
//   { "language": "javascript", "code": "const rgbToHex = (r, g, b) => '#' + [r, g, b].map(x => x.toString(16).padStart(2, '0')).join('');" },
//   { "language": "javascript", "code": "const validateEmail = email => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email); // Email validation" },
//   { "language": "javascript", "code": "const validateUrl = url => /^(https?:\\/\\/)?([\\da-z.-]+)\\.([a-z.]{2,6})([\\/\\w .-]*)*\\/?$/.test(url); // URL validation" },

//   // Python (50 snippets)
//   { "language": "python", "code": "def calculate_factorial(n): return 1 if n <= 1 else n * calculate_factorial(n-1) # Recursive factorial calculation" },
//   { "language": "python", "code": "def is_prime(num): return num > 1 and all(num % i != 0 for i in range(2, int(num**0.5)+1)) # Prime number check" },
//   { "language": "python", "code": "def flatten_list(nested_list): return [item for sublist in nested_list for item in sublist] # Flattens 2D list to 1D" },
//   { "language": "python", "code": "def count_vowels(text): return sum(1 for char in text.lower() if char in 'aeiou') # Counts vowels in string" },
//   { "language": "python", "code": "def reverse_string(s): return s[::-1] # Returns reversed string using slicing" },
//   { "language": "python", "code": "def generate_fibonacci(n): a, b = 0, 1; return [a := (b := a + b) - a for _ in range(n)] # Fibonacci sequence" },
//   { "language": "python", "code": "def list_intersection(a, b): return list(set(a) & set(b)) # Returns common elements between two lists" },
//   { "language": "python", "code": "def rgb_to_hex(r, g, b): return '#{:02x}{:02x}{:02x}'.format(r, g, b) # Converts RGB to HEX color" },
//   { "language": "python", "code": "def chunk_list(lst, n): return [lst[i:i+n] for i in range(0, len(lst), n)] # Splits list into chunks" },
//   { "language": "python", "code": "def count_words(text): return len(text.split()) # Counts words in a string (simple implementation)" },
//   { "language": "python", "code": "def is_palindrome(s): return s == s[::-1] # Checks if string is palindrome" },
//   { "language": "python", "code": "def remove_duplicates(lst): return list(dict.fromkeys(lst)) # Removes duplicates preserving order" },
//   { "language": "python", "code": "def capitalize_words(s): return ' '.join(word.capitalize() for word in s.split()) # Capitalizes each word" },
//   { "language": "python", "code": "def get_file_extension(filename): return filename.split('.')[-1] if '.' in filename else '' # Gets file extension" },
//   { "language": "python", "code": "def median(lst): n = len(lst); s = sorted(lst); return (s[n//2-1]+s[n//2])/2 if n%2==0 else s[n//2] # Calculates median" },
//   { "language": "python", "code": "def mode(lst): return max(set(lst), key=lst.count) # Returns most frequent element" },
//   { "language": "python", "code": "def gcd(a, b): return a if b == 0 else gcd(b, a % b) # Greatest common divisor (recursive)" },
//   { "language": "python", "code": "def lcm(a, b): return a * b // gcd(a, b) # Least common multiple" },
//   { "language": "python", "code": "def is_anagram(s1, s2): return sorted(s1.lower()) == sorted(s2.lower()) # Checks if strings are anagrams" },
//   { "language": "python", "code": "def days_between_dates(date1, date2): from datetime import datetime; return abs((datetime.strptime(date1, '%Y-%m-%d') - datetime.strptime(date2, '%Y-%m-%d')).days" },
//   { "language": "python", "code": "def random_password(length=8): import random, string; return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))" },
//   { "language": "python", "code": "def validate_email(email): import re; return bool(re.match(r'^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}$', email))" },
//   { "language": "python", "code": "def validate_url(url): import re; return bool(re.match(r'^(https?:\\/\\/)?([\\da-z.-]+)\\.([a-z.]{2,6})([\\/\\w .-]*)*\\/?$', url))" },
//   { "language": "python", "code": "def snake_to_camel(s): return ''.join(word.title() for word in s.split('_')) # snake_case to CamelCase" },
//   { "language": "python", "code": "def camel_to_snake(s): return ''.join(['_'+c.lower() if c.isupper() else c for c in s]).lstrip('_') # CamelCase to snake_case" },
//   { "language": "python", "code": "def file_line_count(filename): with open(filename) as f: return sum(1 for _ in f) # Counts lines in file" },
//   { "language": "python", "code": "def word_frequency(text): from collections import Counter; return Counter(text.split()) # Word frequency count" },
//   { "language": "python", "code": "def sort_dict_by_value(d, reverse=False): return dict(sorted(d.items(), key=lambda x: x[1], reverse=reverse))" },
//   { "language": "python", "code": "def merge_dicts(*dicts): from collections import ChainMap; return dict(ChainMap(*reversed(dicts)))" },
//   { "language": "python", "code": "def invert_dict(d): return {v: k for k, v in d.items()} # Swaps keys and values" },
//   { "language": "python", "code": "def deep_update_dict(original, update): for k, v in update.items(): if isinstance(v, dict): original[k] = deep_update_dict(original.get(k, {}), v) else: original[k] = v; return original" },
//   { "language": "python", "code": "def list_to_dict(lst): return {i+1: val for i, val in enumerate(lst)} # Converts list to dict with index keys" },
//   { "language": "python", "code": "def dict_to_list(d): return [d[key] for key in sorted(d.keys())] # Converts dict to list sorted by keys" },
//   { "language": "python", "code": "def transpose_matrix(matrix): return list(zip(*matrix)) # Transposes 2D matrix (list of lists)" },
//   { "language": "python", "code": "def matrix_multiply(a, b): return [[sum(x*y for x,y in zip(a_row,b_col)) for b_col in zip(*b)] for a_row in a]" },
//   { "language": "python", "code": "def is_power_of_two(n): return n > 0 and (n & (n - 1)) == 0 # Checks if number is power of 2" },
//   { "language": "python", "code": "def next_power_of_two(n): return 1 << (n-1).bit_length() # Returns next power of 2 >= n" },
//   { "language": "python", "code": "def binary_search(arr, x): low, high = 0, len(arr)-1; while low <= high: mid = (low + high) // 2; if arr[mid] < x: low = mid + 1; elif arr[mid] > x: high = mid - 1; else: return mid; return -1" },
//   { "language": "python", "code": "def bubble_sort(arr): n = len(arr); for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j]; return arr" },
//   { "language": "python", "code": "def quick_sort(arr): return arr if len(arr) <= 1 else quick_sort([x for x in arr[1:] if x < arr[0]]) + [arr[0]] + quick_sort([x for x in arr[1:] if x >= arr[0]])" },
//   { "language": "python", "code": "def merge_sort(arr): if len(arr) > 1: mid = len(arr)//2; L, R = arr[:mid], arr[mid:]; merge_sort(L); merge_sort(R); i = j = k = 0; while i < len(L) and j < len(R): arr[k] = L[i] if L[i] < R[j] else R[j]; i += (L[i] < R[j]); j += (L[i] >= R[j]); k += 1; arr[k:] = L[i:] or R[j:]" },
//   { "language": "python", "code": "def insertion_sort(arr): for i in range(1, len(arr)): key = arr[i]; j = i-1; while j >=0 and key < arr[j]: arr[j+1] = arr[j]; j -= 1; arr[j+1] = key; return arr" },
//   { "language": "python", "code": "def selection_sort(arr): for i in range(len(arr)): min_idx = min(range(i, len(arr)), key=arr.__getitem__); arr[i], arr[min_idx] = arr[min_idx], arr[i]; return arr" },
//   { "language": "python", "code": "def heap_sort(arr): import heapq; heapq.heapify(arr); return [heapq.heappop(arr) for _ in range(len(arr))]" },
//   { "language": "python", "code": "def counting_sort(arr): max_val, min_val = max(arr), min(arr); count = [0] * (max_val - min_val + 1); for num in arr: count[num - min_val] += 1; return [num for num in range(min_val, max_val+1) for _ in range(count[num-min_val])]" },
//   { "language": "python", "code": "def radix_sort(arr): from itertools import chain; digit = 0; while True: buckets = [[] for _ in range(10)]; for num in arr: buckets[(num//10**digit)%10].append(num); arr = list(chain(*buckets)); if all(num < 10**(digit+1) for num in arr): break; digit += 1; return arr" },
//   { "language": "python", "code": "def bucket_sort(arr, bucket_size=5): if not arr: return []; min_val, max_val = min(arr), max(arr); bucket_count = (max_val - min_val) // bucket_size + 1; buckets = [[] for _ in range(bucket_count)]; for num in arr: buckets[(num - min_val) // bucket_size].append(num); return [num for bucket in buckets for num in sorted(bucket)]" },
// {"language":"cpp","code":"int fibonacci(int n){if(n<2)return n;int a=0,b=1;for(int i=2;i<=n;i++){int c=a+b;a=b;b=c;}return b;}"},
// {"language":"cpp","code":"bool isPrime(int num){if(num<2)return false;for(int i=2;i*i<=num;i++)if(num%i==0)return false;return true;}"},
// {"language":"cpp","code":"string reverseStr(string s){int n=s.length();for(int i=0;i<n/2;i++)swap(s[i],s[n-i-1]);return s;}"},
// {"language":"cpp","code":"int factorial(int n){int r=1;for(int i=2;i<=n;i++)r*=i;return r;}"},
// {"language":"cpp","code":"double circleArea(double r){const double pi=3.1415926535;return pi*r*r;}"},
// {"language":"cpp","code":"int countVowels(string s){int c=0;for(char ch:s)if(tolower(ch)=='a'||tolower(ch)=='e'||tolower(ch)=='i'||tolower(ch)=='o'||tolower(ch)=='u')c++;return c;}"},
// {"language":"cpp","code":"int maxElement(vector<int>v){return *max_element(v.begin(),v.end());}"},
// {"language":"cpp","code":"int sumDigits(int n){int s=0;while(n){s+=n%10;n/=10;}return s;}"},
// {"language":"cpp","code":"bool isPalindrome(string s){string r=s;reverse(r.begin(),r.end());return s==r;}"},
// {"language":"cpp","code":"int gcd(int a,int b){while(b){int t=b;b=a%b;a=t;}return a;}"},
// {"language":"cpp","code":"int lcm(int a,int b){return a*b/gcd(a,b);}"},
// {"language":"cpp","code":"int binaryToDecimal(string b){int d=0,p=1;for(int i=b.length()-1;i>=0;i--){if(b[i]=='1')d+=p;p*=2;}return d;}"},
// {"language":"cpp","code":"bool isPerfectSquare(int n){int s=sqrt(n);return s*s==n;}"},
// {"language":"cpp","code":"int countSetBits(int n){int c=0;while(n){c+=n&1;n>>=1;}return c;}"},
// {"language":"cpp","code":"string decimalToBinary(int n){string b;while(n){b=(n%2?'1':'0')+b;n/=2;}return b.empty()?'0':b;}"},
// {"language":"cpp","code":"int sumOfSeries(int n){return n*(n+1)/2;}"},
// {"language":"cpp","code":"bool isArmstrong(int n){int s=0,t=n;while(t){int d=t%10;s+=d*d*d;t/=10;}return s==n;}"},
// {"language":"cpp","code":"int findMin(vector<int>v){return *min_element(v.begin(),v.end());}"},
// {"language":"cpp","code":"int productDigits(int n){int p=1;while(n){p*=n%10;n/=10;}return p;}"},
// {"language":"cpp","code":"bool isAnagram(string a,string b){sort(a.begin(),a.end());sort(b.begin(),b.end());return a==b;}"},
// {"language":"cpp","code":"int countPrimes(int n){int c=0;for(int i=2;i<n;i++)if(isPrime(i))c++;return c;}"},
// {"language":"cpp","code":"int power(int b,int e){int r=1;while(e--){r*=b;}return r;}"},
// {"language":"cpp","code":"string removeSpaces(string s){s.erase(remove(s.begin(),s.end(),' '),s.end());return s;}"},
// {"language":"cpp","code":"int findSecondMax(vector<int>v){sort(v.begin(),v.end());return v[v.size()-2];}"},
// {"language":"cpp","code":"int countWords(string s){int c=0;for(char ch:s)if(ch==' ')c++;return c+1;}"},
// {"language":"cpp","code":"int sumEven(vector<int>v){int s=0;for(int n:v)if(n%2==0)s+=n;return s;}"},
// {"language":"cpp","code":"int sumOdd(vector<int>v){int s=0;for(int n:v)if(n%2!=0)s+=n;return s;}"},
// {"language":"cpp","code":"bool isSorted(vector<int>v){for(int i=1;i<v.size();i++)if(v[i]<v[i-1])return false;return true;}"},
// {"language":"cpp","code":"int findMissingNumber(vector<int>v){int n=v.size();return n*(n+1)/2-accumulate(v.begin(),v.end(),0);}"},
// {"language":"cpp","code":"int countDigits(int n){int c=0;while(n){c++;n/=10;}return c;}"},
// {"language":"cpp","code":"string toUpperCase(string s){for(char&c:s)c=toupper(c);return s;}"},
// {"language":"cpp","code":"string toLowerCase(string s){for(char&c:s)c=tolower(c);return s;}"},
// {"language":"cpp","code":"int findFrequency(vector<int>v,int x){return count(v.begin(),v.end(),x);}"},
// {"language":"cpp","code":"int sumOfSquares(int n){int s=0;for(int i=1;i<=n;i++)s+=i*i;return s;}"},
// {"language":"cpp","code":"int findMaxIndex(vector<int>v){return distance(v.begin(),max_element(v.begin(),v.end()));}"},
// {"language":"cpp","code":"int findMinIndex(vector<int>v){return distance(v.begin(),min_element(v.begin(),v.end()));}"},
// {"language":"cpp","code":"bool containsDuplicate(vector<int>v){sort(v.begin(),v.end());for(int i=1;i<v.size();i++)if(v[i]==v[i-1])return true;return false;}"},
// {"language":"cpp","code":"int sumRange(int a,int b){int s=0;for(int i=a;i<=b;i++)s+=i;return s;}"},
// {"language":"cpp","code":"int productRange(int a,int b){int p=1;for(int i=a;i<=b;i++)p*=i;return p;}"},
// {"language":"cpp","code":"int countCapitalLetters(string s){int c=0;for(char ch:s)if(isupper(ch))c++;return c;}"},
// {"language":"cpp","code":"int countSmallLetters(string s){int c=0;for(char ch:s)if(islower(ch))c++;return c;}"},
// {"language":"cpp","code":"string removeDuplicates(string s){sort(s.begin(),s.end());s.erase(unique(s.begin(),s.end()),s.end());return s;}"},
// {"language":"cpp","code":"int findMedian(vector<int>v){sort(v.begin(),v.end());return v[v.size()/2];}"},
// {"language":"cpp","code":"int sumOfCubes(int n){int s=0;for(int i=1;i<=n;i++)s+=i*i*i;return s;}"},
// {"language":"cpp","code":"int findLastDigit(int n){return abs(n)%10;}"},
// {"language":"cpp","code":"int findFirstDigit(int n){while(n>=10)n/=10;return n;}"},
// {"language":"cpp","code":"bool isPowerOfTwo(int n){return n>0&&(n&(n-1))==0;}"},
// {"language":"cpp","code":"int countFactors(int n){int c=0;for(int i=1;i<=n;i++)if(n%i==0)c++;return c;}"},
// {"language":"cpp","code":"int stringToInt(string s){int n=0;for(char c:s)n=n*10+(c-'0');return n;}"},
// {"language":"java","code":"public static int fibonacci(int n){if(n<2)return n;int a=0,b=1;for(int i=2;i<=n;i++){int c=a+b;a=b;b=c;}return b;}"},
// {"language":"java","code":"public static boolean isPrime(int num){if(num<2)return false;for(int i=2;i*i<=num;i++)if(num%i==0)return false;return true;}"},
// {"language":"java","code":"public static String reverseStr(String s){return new StringBuilder(s).reverse().toString();}"},
// {"language":"java","code":"public static int factorial(int n){int r=1;for(int i=2;i<=n;i++)r*=i;return r;}"},
// {"language":"java","code":"public static double circleArea(double r){final double pi=3.1415926535;return pi*r*r;}"},
// {"language":"java","code":"public static int countVowels(String s){int c=0;for(char ch:s.toLowerCase().toCharArray())if(ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u')c++;return c;}"},
// {"language":"java","code":"public static int maxElement(int[]a){int m=a[0];for(int n:a)if(n>m)m=n;return m;}"},
// {"language":"java","code":"public static int sumDigits(int n){int s=0;while(n>0){s+=n%10;n/=10;}return s;}"},
// {"language":"java","code":"public static boolean isPalindrome(String s){return s.equals(new StringBuilder(s).reverse().toString());}"},
// {"language":"java","code":"public static int gcd(int a,int b){while(b!=0){int t=b;b=a%b;a=t;}return a;}"},
// {"language":"java","code":"public static int lcm(int a,int b){return a*b/gcd(a,b);}"},
// {"language":"java","code":"public static int binaryToDecimal(String b){return Integer.parseInt(b,2);}"},
// {"language":"java","code":"public static boolean isPerfectSquare(int n){int s=(int)Math.sqrt(n);return s*s==n;}"},
// {"language":"java","code":"public static int countSetBits(int n){int c=0;while(n>0){c+=n&1;n>>=1;}return c;}"},
// {"language":"java","code":"public static String decimalToBinary(int n){return Integer.toBinaryString(n);}"},
// {"language":"java","code":"public static int sumOfSeries(int n){return n*(n+1)/2;}"},
// {"language":"java","code":"public static boolean isArmstrong(int n){int s=0,t=n;while(t>0){int d=t%10;s+=d*d*d;t/=10;}return s==n;}"},
// {"language":"java","code":"public static int findMin(int[]a){int m=a[0];for(int n:a)if(n<m)m=n;return m;}"},
// {"language":"java","code":"public static int productDigits(int n){int p=1;while(n>0){p*=n%10;n/=10;}return p;}"},
// {"language":"java","code":"public static boolean isAnagram(String a,String b){char[]x=a.toCharArray();char[]y=b.toCharArray();Arrays.sort(x);Arrays.sort(y);return Arrays.equals(x,y);}"},
// {"language":"java","code":"public static int countPrimes(int n){int c=0;for(int i=2;i<n;i++)if(isPrime(i))c++;return c;}"},
// {"language":"java","code":"public static int power(int b,int e){int r=1;while(e-->0)r*=b;return r;}"},
// {"language":"java","code":"public static String removeSpaces(String s){return s.replaceAll(\"\\\\s+\",\"\");}"},
// {"language":"java","code":"public static int findSecondMax(int[]a){Arrays.sort(a);return a[a.length-2];}"},
// {"language":"java","code":"public static int countWords(String s){return s.split(\"\\\\s+\").length;}"},
// {"language":"java","code":"public static int sumEven(int[]a){int s=0;for(int n:a)if(n%2==0)s+=n;return s;}"},
// {"language":"java","code":"public static int sumOdd(int[]a){int s=0;for(int n:a)if(n%2!=0)s+=n;return s;}"},
// {"language":"java","code":"public static boolean isSorted(int[]a){for(int i=1;i<a.length;i++)if(a[i]<a[i-1])return false;return true;}"},
// {"language":"java","code":"public static int findMissingNumber(int[]a){int n=a.length;return n*(n+1)/2-Arrays.stream(a).sum();}"},
// {"language":"java","code":"public static int countDigits(int n){return String.valueOf(n).length();}"},
// {"language":"java","code":"public static String toUpperCase(String s){return s.toUpperCase();}"},
// {"language":"java","code":"public static String toLowerCase(String s){return s.toLowerCase();}"},
// {"language":"java","code":"public static int findFrequency(int[]a,int x){int c=0;for(int n:a)if(n==x)c++;return c;}"},
// {"language":"java","code":"public static int sumOfSquares(int n){int s=0;for(int i=1;i<=n;i++)s+=i*i;return s;}"},
// {"language":"java","code":"public static int findMaxIndex(int[]a){int m=0;for(int i=1;i<a.length;i++)if(a[i]>a[m])m=i;return m;}"},
// {"language":"java","code":"public static int findMinIndex(int[]a){int m=0;for(int i=1;i<a.length;i++)if(a[i]<a[m])m=i;return m;}"},
// {"language":"java","code":"public static boolean containsDuplicate(int[]a){Arrays.sort(a);for(int i=1;i<a.length;i++)if(a[i]==a[i-1])return true;return false;}"},
// {"language":"java","code":"public static int sumRange(int a,int b){int s=0;for(int i=a;i<=b;i++)s+=i;return s;}"},
// {"language":"java","code":"public static int productRange(int a,int b){int p=1;for(int i=a;i<=b;i++)p*=i;return p;}"},
// {"language":"java","code":"public static int countCapitalLetters(String s){int c=0;for(char ch:s.toCharArray())if(Character.isUpperCase(ch))c++;return c;}"},
// {"language":"java","code":"public static int countSmallLetters(String s){int c=0;for(char ch:s.toCharArray())if(Character.isLowerCase(ch))c++;return c;}"},
// {"language":"java","code":"public static String removeDuplicates(String s){char[]a=s.toCharArray();Arrays.sort(a);return new String(a).replaceAll(\"(.)\\\\1+\",\"$1\");}"},
// {"language":"java","code":"public static int findMedian(int[]a){Arrays.sort(a);return a[a.length/2];}"},
// {"language":"java","code":"public static int sumOfCubes(int n){int s=0;for(int i=1;i<=n;i++)s+=i*i*i;return s;}"},
// {"language":"java","code":"public static int findLastDigit(int n){return Math.abs(n)%10;}"},
// {"language":"java","code":"public static int findFirstDigit(int n){while(n>=10)n/=10;return n;}"},
// {"language":"java","code":"public static boolean isPowerOfTwo(int n){return n>0&&(n&(n-1))==0;}"},
// {"language":"java","code":"public static int countFactors(int n){int c=0;for(int i=1;i<=n;i++)if(n%i==0)c++;return c;}"},
// {"language":"java","code":"public static int stringToInt(String s){return Integer.parseInt(s);}"},
// {"language":"typescript","code":"const fibonacci=(n:number):number=>n<2?n:fibonacci(n-1)+fibonacci(n-2);"},
// {"language":"typescript","code":"const isPrime=(n:number):boolean=>{if(n<2)return false;for(let i=2;i*i<=n;i++)if(n%i===0)return false;return true;}"},
// {"language":"typescript","code":"const reverseStr=(s:string):string=>s.split('').reverse().join('');"},
// {"language":"typescript","code":"const factorial=(n:number):number=>n<=1?1:n*factorial(n-1);"},
// {"language":"typescript","code":"const circleArea=(r:number):number=>Math.PI*r*r;"},
// {"language":"typescript","code":"const countVowels=(s:string):number=>(s.match(/[aeiou]/gi)||[]).length;"},
// {"language":"typescript","code":"const maxElement=(a:number[]):number=>Math.max(...a);"},
// {"language":"typescript","code":"const sumDigits=(n:number):number=>n.toString().split('').reduce((s,d)=>s+ +d,0);"},
// {"language":"typescript","code":"const isPalindrome=(s:string):boolean=>s===s.split('').reverse().join('');"},
// {"language":"typescript","code":"const gcd=(a:number,b:number):number=>b===0?a:gcd(b,a%b);"},
// {"language":"typescript","code":"const lcm=(a:number,b:number):number=>(a*b)/gcd(a,b);"},
// {"language":"typescript","code":"const binaryToDecimal=(b:string):number=>parseInt(b,2);"},
// {"language":"typescript","code":"const isPerfectSquare=(n:number):boolean=>Number.isInteger(Math.sqrt(n));"},
// {"language":"typescript","code":"const countSetBits=(n:number):number=>n.toString(2).replace(/0/g,'').length;"},
// {"language":"typescript","code":"const decimalToBinary=(n:number):string=>n.toString(2);"},
// {"language":"typescript","code":"const sumOfSeries=(n:number):number=>n*(n+1)/2;"},
// {"language":"typescript","code":"const isArmstrong=(n:number):boolean=>n===n.toString().split('').reduce((s,d)=>s+Math.pow(+d,3),0);"},
// {"language":"typescript","code":"const findMin=(a:number[]):number=>Math.min(...a);"},
// {"language":"typescript","code":"const productDigits=(n:number):number=>n.toString().split('').reduce((p,d)=>p* +d,1);"},
// {"language":"typescript","code":"const isAnagram=(a:string,b:string):boolean=>a.split('').sort().join('')===b.split('').sort().join('');"},
// {"language":"typescript","code":"const countPrimes=(n:number):number=>{let c=0;for(let i=2;i<n;i++)if(isPrime(i))c++;return c;}"},
// {"language":"typescript","code":"const power=(b:number,e:number):number=>e===0?1:b*power(b,e-1);"},
// {"language":"typescript","code":"const removeSpaces=(s:string):string=>s.replace(/\\s+/g,'');"},
// {"language":"typescript","code":"const findSecondMax=(a:number[]):number=>[...a].sort((x,y)=>y-x)[1];"},
// {"language":"typescript","code":"const countWords=(s:string):number=>s.trim()===''?0:s.split(/\\s+/).length;"},
// {"language":"typescript","code":"const sumEven=(a:number[]):number=>a.filter(n=>n%2===0).reduce((s,n)=>s+n,0);"},
// {"language":"typescript","code":"const sumOdd=(a:number[]):number=>a.filter(n=>n%2!==0).reduce((s,n)=>s+n,0);"},
// {"language":"typescript","code":"const isSorted=(a:number[]):boolean=>a.every((v,i)=>i===0||v>=a[i-1]);"},
// {"language":"typescript","code":"const findMissingNumber=(a:number[]):number=>a.length*(a.length+1)/2-a.reduce((s,n)=>s+n,0);"},
// {"language":"typescript","code":"const countDigits=(n:number):number=>Math.abs(n).toString().length;"},
// {"language":"typescript","code":"const toUpperCase=(s:string):string=>s.toUpperCase();"},
// {"language":"typescript","code":"const toLowerCase=(s:string):string=>s.toLowerCase();"},
// {"language":"typescript","code":"const findFrequency=(a:number[],x:number):number=>a.filter(n=>n===x).length;"},
// {"language":"typescript","code":"const sumOfSquares=(n:number):number=>Array(n).fill(0).reduce((s,_,i)=>s+(i+1)**2,0);"},
// {"language":"typescript","code":"const findMaxIndex=(a:number[]):number=>a.indexOf(Math.max(...a));"},
// {"language":"typescript","code":"const findMinIndex=(a:number[]):number=>a.indexOf(Math.min(...a));"},
// {"language":"typescript","code":"const containsDuplicate=(a:number[]):boolean=>new Set(a).size!==a.length;"},
// {"language":"typescript","code":"const sumRange=(a:number,b:number):number=>Array(b-a+1).fill(0).reduce((s,_,i)=>s+a+i,0);"},
// {"language":"typescript","code":"const productRange=(a:number,b:number):number=>Array(b-a+1).fill(0).reduce((p,_,i)=>p*(a+i),1);"},
// {"language":"typescript","code":"const countCapitalLetters=(s:string):number=>(s.match(/[A-Z]/g)||[]).length;"},
// {"language":"typescript","code":"const countSmallLetters=(s:string):number=>(s.match(/[a-z]/g)||[]).length;"},
// {"language":"typescript","code":"const removeDuplicates=(s:string):string=>[...new Set(s.split(''))].join('');"},
// {"language":"typescript","code":"const findMedian=(a:number[]):number=>[...a].sort((x,y)=>x-y)[Math.floor(a.length/2)];"},
// {"language":"typescript","code":"const sumOfCubes=(n:number):number=>Array(n).fill(0).reduce((s,_,i)=>s+(i+1)**3,0);"},
// {"language":"typescript","code":"const findLastDigit=(n:number):number=>Math.abs(n)%10;"},
// {"language":"typescript","code":"const findFirstDigit=(n:number):number=>parseInt(Math.abs(n).toString()[0]);"},
// {"language":"typescript","code":"const isPowerOfTwo=(n:number):boolean=>n>0&&(n&(n-1))===0;"},
// {"language":"typescript","code":"const countFactors=(n:number):number=>{let c=0;for(let i=1;i<=n;i++)if(n%i===0)c++;return c;}"},
// {"language":"typescript","code":"const stringToInt=(s:string):number=>parseInt(s);"},
// {"language":"css","code":"body{font-family:Arial,sans-serif;margin:0;padding:20px;background:#f5f5f5;color:#333;}"},
// {"language":"css","code":".container{display:flex;flex-wrap:wrap;justify-content:space-between;align-items:center;gap:20px;}"},
// {"language":"css","code":"a{color:#0066cc;text-decoration:none;transition:color 0.3s ease;}a:hover{color:#004499;}"},
// {"language":"css","code":"button{padding:10px 20px;border:none;border-radius:4px;background:#007bff;color:white;cursor:pointer;}"},
// {"language":"css","code":"h1,h2,h3{margin-top:0;line-height:1.2;color:#222;font-weight:600;}"},
// {"language":"css","code":".card{background:white;border-radius:8px;box-shadow:0 2px 4px rgba(0,0,0,0.1);padding:20px;}"},
// {"language":"css","code":"@media (max-width:768px){.container{flex-direction:column;gap:10px;}}"},
// {"language":"css","code":"input,select,textarea{width:100%;padding:10px;border:1px solid #ddd;border-radius:4px;}"},
// {"language":"css","code":".grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(250px,1fr));gap:20px;}"},
// {"language":"css","code":"::selection{background:#007bff;color:white;}"},
// {"language":"css","code":"body.dark{background:#222;color:#eee;}body.dark .card{background:#333;}"},
// {"language":"css","code":".btn{display:inline-block;padding:8px 16px;border-radius:4px;text-align:center;}"},
// {"language":"css","code":"nav{display:flex;gap:15px;padding:10px 0;border-bottom:1px solid #eee;}"},
// {"language":"css","code":"footer{text-align:center;padding:20px;margin-top:40px;border-top:1px solid #eee;}"},
// {"language":"css","code":".alert{padding:15px;border-radius:4px;margin:10px 0;}"},
// {"language":"css","code":".alert.success{background:#d4edda;color:#155724;border:1px solid #c3e6cb;}"},
// {"language":"css","code":".alert.error{background:#f8d7da;color:#721c24;border:1px solid #f5c6cb;}"},
// {"language":"css","code":"img{max-width:100%;height:auto;display:block;border-radius:4px;}"},
// {"language":"css","code":".modal{position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);}"},
// {"language":"css","code":".loader{border:4px solid #f3f3f3;border-top:4px solid #3498db;border-radius:50%;animation:spin 1s linear infinite;}"},
// {"language":"css","code":"@keyframes spin{0%{transform:rotate(0deg);}100%{transform:rotate(360deg);}}"},
// {"language":"css","code":".tooltip{position:relative;}.tooltip:hover:after{content:attr(data-tooltip);position:absolute;}"},
// {"language":"css","code":"table{width:100%;border-collapse:collapse;}td,th{padding:12px;text-align:left;border-bottom:1px solid #ddd;}"},
// {"language":"css","code":"tr:hover{background-color:#f5f5f5;}"},
// {"language":"css","code":"textarea{min-height:100px;resize:vertical;}"},
// {"language":"css","code":".badge{display:inline-block;padding:3px 6px;font-size:12px;border-radius:10px;background:#eee;}"},
// {"language":"css","code":".sticky{position:sticky;top:0;background:white;z-index:100;box-shadow:0 2px 4px rgba(0,0,0,0.1);}"},
// {"language":"css","code":".overlay{position:absolute;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,0.7);}"},
// {"language":"css","code":".center{display:flex;justify-content:center;align-items:center;height:100%;}"},
// {"language":"css","code":".text-center{text-align:center;}"},
// {"language":"css","code":".text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;}"},
// {"language":"css","code":".shadow{box-shadow:0 4px 6px rgba(0,0,0,0.1);}"},
// {"language":"css","code":".hover-scale{transition:transform 0.3s ease;}.hover-scale:hover{transform:scale(1.05);}"},
// {"language":"css","code":".gradient-bg{background:linear-gradient(135deg,#6e8efb,#a777e3);}"},
// {"language":"css","code":".separator{border:none;height:1px;background:#eee;margin:20px 0;}"},
// {"language":"css","code":".avatar{width:40px;height:40px;border-radius:50%;object-fit:cover;}"},
// {"language":"css","code":".full-width{width:100vw;position:relative;left:50%;right:50%;margin-left:-50vw;margin-right:-50vw;}"},
// {"language":"css","code":".no-scroll{overflow:hidden;}"},
// {"language":"css","code":".visually-hidden{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0;}"},
// {"language":"css","code":".responsive-iframe{position:relative;padding-bottom:56.25%;height:0;overflow:hidden;}"},
// {"language":"css","code":".responsive-iframe iframe{position:absolute;top:0;left:0;width:100%;height:100%;}"},
// {"language":"css","code":".aspect-ratio{position:relative;width:100%;padding-top:56.25%;}"},
// {"language":"css","code":".aspect-ratio>*{position:absolute;top:0;left:0;width:100%;height:100%;}"},
// {"language":"css","code":".scroll-snap{scroll-snap-type:y mandatory;overflow-y:scroll;height:100vh;}"},
// {"language":"css","code":".scroll-snap>*{scroll-snap-align:start;}"},
// {"language":"css","code":".dark-mode-toggle{cursor:pointer;padding:10px;border-radius:50%;background:#333;color:white;}"},
// {"language":"css","code":".skeleton{background:#eee;background:linear-gradient(90deg,#eee 25%,#f5f5f5 50%,#eee 75%);background-size:200% 100%;animation:shimmer 1.5s infinite;}"},
// {"language":"css","code":"@keyframes shimmer{0%{background-position:200% 0;}100%{background-position:-200% 0;}}"},
// {"language":"css","code":".backdrop-filter{backdrop-filter:blur(5px);background:rgba(255,255,255,0.5);}"},
// {"language":"css","code":".custom-scrollbar::-webkit-scrollbar{width:8px;}.custom-scrollbar::-webkit-scrollbar-thumb{background:#ccc;border-radius:4px;}"},
// {"language":"html","code":"<!DOCTYPE html><html><head><title>Page Title</title></head><body><h1>Hello World</h1></body></html>"},
// {"language":"html","code":"<div class='container'><header><nav><a href='#'>Home</a></nav></header><main></main></div>"},
// {"language":"html","code":"<form><input type='text' placeholder='Name' required><button type='submit'>Submit</button></form>"},
// {"language":"html","code":"<table><tr><th>Name</th><th>Age</th></tr><tr><td>John</td><td>30</td></tr></table>"},
// {"language":"html","code":"<ul><li>Item 1</li><li>Item 2</li><li>Item 3</li></ul>"},
// {"language":"html","code":"<article><h2>Article Title</h2><p>Article content goes here.</p></article>"},
// {"language":"html","code":"<video width='320' height='240' controls><source src='movie.mp4' type='video/mp4'></video>"},
// {"language":"html","code":"<audio controls><source src='audio.mp3' type='audio/mpeg'>Your browser does not support audio.</audio>"},
// {"language":"html","code":"<canvas id='myCanvas' width='200' height='100'></canvas><script>const ctx=document.getElementById('myCanvas').getContext('2d');</script>"},
// {"language":"html","code":"<svg width='100' height='100'><circle cx='50' cy='50' r='40' fill='red'/></svg>"},
// {"language":"html","code":"<details><summary>Click me</summary><p>Hidden content revealed!</p></details>"},
// {"language":"html","code":"<progress value='70' max='100'></progress>"},
// {"language":"html","code":"<meter value='2' min='0' max='10'>2 out of 10</meter>"},
// {"language":"html","code":"<iframe src='https://example.com' title='Example'></iframe>"},
// {"language":"html","code":"<picture><source media='(min-width:650px)' srcset='img_pink_flowers.jpg'><img src='img_white_flower.jpg'></picture>"},
// {"language":"html","code":"<datalist id='browsers'><option value='Chrome'><option value='Firefox'></datalist><input list='browsers'>"},
// {"language":"html","code":"<select><option value='volvo'>Volvo</option><option value='saab'>Saab</option></select>"},
// {"language":"html","code":"<textarea rows='4' cols='50'>Enter text here...</textarea>"},
// {"language":"html","code":"<label>Username: <input type='text' name='username'></label>"},
// {"language":"html","code":"<fieldset><legend>Personal Info</legend><input type='text'></fieldset>"},
// {"language":"html","code":"<output name='result'></output>"},
// {"language":"html","code":"<button onclick='alert(\"Clicked!\")'>Click Me</button>"},
// {"language":"html","code":"<div contenteditable='true'>You can edit this text.</div>"},
// {"language":"html","code":"<template><div>This content is hidden during page load.</div></template>"},
// {"language":"html","code":"<slot name='content'>Default content</slot>"},
// {"language":"html","code":"<marquee behavior='scroll' direction='left'>Scrolling text</marquee>"},
// {"language":"html","code":"<figure><img src='image.jpg' alt='Image'><figcaption>Caption</figcaption></figure>"},
// {"language":"html","code":"<time datetime='2023-11-15'>November 15</time>"},
// {"language":"html","code":"<mark>Highlighted text</mark>"},
// {"language":"html","code":"<blockquote cite='source'>Quote text here.</blockquote>"},
// {"language":"html","code":"<cite>The Title</cite>"},
// {"language":"html","code":"<abbr title='World Health Organization'>WHO</abbr>"},
// {"language":"html","code":"<code>console.log('Hello');</code>"},
// {"language":"html","code":"<pre>Text in a pre element is displayed in a fixed-width font.</pre>"},
// {"language":"html","code":"<kbd>Ctrl</kbd>+<kbd>C</kbd>"},
// {"language":"html","code":"<var>x</var> = 5;"},
// {"language":"html","code":"<samp>Sample output</samp>"},
// {"language":"html","code":"<embed src='flash.swf' width='200' height='100'>"},
// {"language":"html","code":"<object data='pdf.pdf' width='400' height='300'></object>"},
// {"language":"html","code":"<param name='autoplay' value='true'>"},
// {"language":"html","code":"<track kind='subtitles' src='subtitles.vtt' srclang='en'>"},
// {"language":"html","code":"<map name='workmap'><area shape='rect' coords='0,0,50,50' href='a.htm'></map><img src='work.jpg' usemap='#workmap'>"},
// {"language":"html","code":"<noscript>Your browser does not support JavaScript!</noscript>"},
// {"language":"html","code":"<style>body{background:#fff;}</style>"},
// {"language":"html","code":"<link rel='stylesheet' href='styles.css'>"},
// {"language":"html","code":"<meta charset='UTF-8'>"},
// {"language":"html","code":"<meta name='viewport' content='width=device-width, initial-scale=1.0'>"},
// {"language":"html","code":"<base href='https://example.com/' target='_blank'>"},
// {"language":"html","code":"<script>document.write('Hello World!');</script>"},{"language":"csharp","code":"public class Program{static void Main(){Console.WriteLine(\"Hello World\");}}"},
// {"language":"csharp","code":"public int Add(int a,int b){return a+b;}"},
// {"language":"csharp","code":"public bool IsEven(int n){return n%2==0;}"},
// {"language":"csharp","code":"public string Reverse(string s){return new string(s.Reverse().ToArray());}"},
// {"language":"csharp","code":"public int Factorial(int n){return n<=1?1:n*Factorial(n-1);}"},
// {"language":"csharp","code":"public bool IsPrime(int n){if(n<2)return false;for(int i=2;i*i<=n;i++)if(n%i==0)return false;return true;}"},
// {"language":"csharp","code":"public int Fibonacci(int n){return n<2?n:Fibonacci(n-1)+Fibonacci(n-2);}"},
// {"language":"csharp","code":"public int Max(int a,int b){return a>b?a:b;}"},
// {"language":"csharp","code":"public int SumDigits(int n){int s=0;while(n>0){s+=n%10;n/=10;}return s;}"},
// {"language":"csharp","code":"public double CircleArea(double r){return Math.PI*r*r;}"},
// {"language":"csharp","code":"public bool IsLeapYear(int y){return y%4==0&&(y%100!=0||y%400==0);}"},
// {"language":"csharp","code":"public int GCD(int a,int b){return b==0?a:GCD(b,a%b);}"},
// {"language":"csharp","code":"public int LCM(int a,int b){return a*b/GCD(a,b);}"},
// {"language":"csharp","code":"public int Power(int b,int e){return e==0?1:b*Power(b,e-1);}"},
// {"language":"csharp","code":"public bool IsPalindrome(string s){return s==Reverse(s);}"},
// {"language":"csharp","code":"public int CountVowels(string s){return s.Count(c=>\"aeiou\".Contains(char.ToLower(c)));}"},
// {"language":"csharp","code":"public int BinaryToDecimal(string b){return Convert.ToInt32(b,2);}"},
// {"language":"csharp","code":"public string DecimalToBinary(int n){return Convert.ToString(n,2);}"},
// {"language":"csharp","code":"public bool IsArmstrong(int n){return n==n.ToString().Sum(c=>(int)Math.Pow(c-'0',3));}"},
// {"language":"csharp","code":"public int ProductDigits(int n){return n.ToString().Aggregate(1,(p,c)=>p*(c-'0'));}"},
// {"language":"csharp","code":"public int[] BubbleSort(int[]a){for(int i=0;i<a.Length;i++)for(int j=0;j<a.Length-i-1;j++)if(a[j]>a[j+1])(a[j],a[j+1])=(a[j+1],a[j]);return a;}"},
// {"language":"csharp","code":"public int StringToInt(string s){return int.Parse(s);}"},
// {"language":"csharp","code":"public string IntToString(int n){return n.ToString();}"},
// {"language":"csharp","code":"public DateTime AddDays(DateTime d,int days){return d.AddDays(days);}"},
// {"language":"csharp","code":"public TimeSpan DateDiff(DateTime d1,DateTime d2){return d2-d1;}"},
// {"language":"csharp","code":"public double Average(int[]a){return a.Average();}"},
// {"language":"csharp","code":"public int Sum(int[]a){return a.Sum();}"},
// {"language":"csharp","code":"public int MaxElement(int[]a){return a.Max();}"},
// {"language":"csharp","code":"public int MinElement(int[]a){return a.Min();}"},
// {"language":"csharp","code":"public int CountPrimes(int n){return Enumerable.Range(2,n-1).Count(IsPrime);}"},
// {"language":"csharp","code":"public bool IsAnagram(string a,string b){return a.OrderBy(c=>c).SequenceEqual(b.OrderBy(c=>c));}"},
// {"language":"csharp","code":"public string RemoveWhitespace(string s){return new string(s.Where(c=>!char.IsWhiteSpace(c)).ToArray());}"},
// {"language":"csharp","code":"public int CountWords(string s){return s.Split(new[]{' '},StringSplitOptions.RemoveEmptyEntries).Length;}"},
// {"language":"csharp","code":"public string Capitalize(string s){return string.Join(\" \",s.Split(' ').Select(w=>char.ToUpper(w[0])+w.Substring(1)));}"},
// {"language":"csharp","code":"public char MostFrequentChar(string s){return s.GroupBy(c=>c).OrderByDescending(g=>g.Count()).First().Key;}"},
// {"language":"csharp","code":"public int CountChar(string s,char c){return s.Count(x=>x==c);}"},
// {"language":"csharp","code":"public string Repeat(string s,int n){return string.Concat(Enumerable.Repeat(s,n));}"},
// {"language":"csharp","code":"public bool ContainsDuplicates(int[]a){return a.Distinct().Count()!=a.Length;}"},
// {"language":"csharp","code":"public int[] RemoveDuplicates(int[]a){return a.Distinct().ToArray();}"},
// {"language":"csharp","code":"public int[] ReverseArray(int[]a){Array.Reverse(a);return a;}"},
// {"language":"csharp","code":"public int[] EvenNumbers(int[]a){return a.Where(n=>n%2==0).ToArray();}"},
// {"language":"csharp","code":"public int[] OddNumbers(int[]a){return a.Where(n=>n%2!=0).ToArray();}"},
// {"language":"csharp","code":"public int[] PositiveNumbers(int[]a){return a.Where(n=>n>0).ToArray();}"},
// {"language":"csharp","code":"public int[] NegativeNumbers(int[]a){return a.Where(n=>n<0).ToArray();}"},
// {"language":"csharp","code":"public int[] SquareNumbers(int[]a){return a.Select(n=>n*n).ToArray();}"},
// {"language":"csharp","code":"public int[] CubeNumbers(int[]a){return a.Select(n=>n*n*n).ToArray();}"},
// {"language":"csharp","code":"public int[] FilterGreaterThan(int[]a,int n){return a.Where(x=>x>n).ToArray();}"},
// {"language":"csharp","code":"public int[] FilterLessThan(int[]a,int n){return a.Where(x=>x<n).ToArray();}"},
// {"language":"csharp","code":"public int[] RandomArray(int size){var r=new Random();return Enumerable.Range(0,size).Select(i=>r.Next()).ToArray();}"},
// {"language":"php","code":"<?php function sum($a,$b){return $a+$b;}"},
// {"language":"php","code":"<?php function factorial($n){return $n<=1?1:$n*factorial($n-1);}"},
// {"language":"php","code":"<?php function isPrime($n){if($n<2)return false;for($i=2;$i*$i<=$n;$i++)if($n%$i==0)return false;return true;}"},
// {"language":"php","code":"<?php function fibonacci($n){return $n<2?$n:fibonacci($n-1)+fibonacci($n-2);}"},
// {"language":"php","code":"<?php function maxNum($a,$b){return $a>$b?$a:$b;}"},
// {"language":"php","code":"<?php function minNum($a,$b){return $a<$b?$a:$b;}"},
// {"language":"php","code":"<?php function absVal($x){return $x<0?-$x:$x;}"},
// {"language":"php","code":"<?php function circleArea($r){return 3.14159*$r*$r;}"},
// {"language":"php","code":"<?php function isLeap($y){return $y%4==0&&($y%100!=0||$y%400==0);}"},
// {"language":"php","code":"<?php function gcd($a,$b){return $b==0?$a:gcd($b,$a%$b);}"},
// {"language":"php","code":"<?php function lcm($a,$b){return $a*$b/gcd($a,$b);}"},
// {"language":"php","code":"<?php function power($b,$e){return $e==0?1:$b*power($b,$e-1);}"},
// {"language":"php","code":"<?php function sumDigits($n){$s=0;while($n){$s+=$n%10;$n/=10;}return $s;}"},
// {"language":"php","code":"<?php function reverse($n){$r=0;while($n){$r=$r*10+$n%10;$n/=10;}return $r;}"},
// {"language":"php","code":"<?php function isPalindrome($n){return $n==reverse($n);}"},
// {"language":"php","code":"<?php function countDigits($n){$c=0;while($n){$c++;$n/=10;}return $c;}"},
// {"language":"php","code":"<?php function isArmstrong($n){$s=0;$t=$n;while($t){$d=$t%10;$s+=$d*$d*$d;$t/=10;}return $s==$n;}"},
// {"language":"php","code":"<?php function productDigits($n){$p=1;while($n){$p*=$n%10;$n/=10;}return $p;}"},
// {"language":"php","code":"<?php function binaryToDecimal($b){return bindec($b);}"},
// {"language":"php","code":"<?php function decimalToBinary($d){return decbin($d);}"},
// {"language":"php","code":"<?php function isPerfectSquare($n){$s=sqrt($n);return $s*$s==$n;}"},
// {"language":"php","code":"<?php function countSetBits($n){return substr_count(decbin($n),'1');}"},
// {"language":"php","code":"<?php function sumNatural($n){return $n*($n+1)/2;}"},
// {"language":"php","code":"<?php function sumEven($n){return $n*($n+1);}"},
// {"language":"php","code":"<?php function sumOdd($n){return $n*$n;}"},
// {"language":"php","code":"<?php function sumSquares($n){return $n*($n+1)*(2*$n+1)/6;}"},
// {"language":"php","code":"<?php function sumCubes($n){return $n*$n*($n+1)*($n+1)/4;}"},
// {"language":"php","code":"<?php function lastDigit($n){return abs($n)%10;}"},
// {"language":"php","code":"<?php function firstDigit($n){while($n>=10)$n/=10;return $n;}"},
// {"language":"php","code":"<?php function isPowerOfTwo($n){return $n>0&&($n&($n-1))==0;}"},
// {"language":"php","code":"<?php function countFactors($n){$c=0;for($i=1;$i<=$n;$i++)if($n%$i==0)$c++;return $c;}"},
// {"language":"php","code":"<?php function isEven($n){return $n%2==0;}"},
// {"language":"php","code":"<?php function isOdd($n){return $n%2!=0;}"},
// {"language":"php","code":"<?php function isPositive($n){return $n>0;}"},
// {"language":"php","code":"<?php function isNegative($n){return $n<0;}"},
// {"language":"php","code":"<?php function isZero($n){return $n==0;}"},
// {"language":"php","code":"<?php function isDivisible($a,$b){return $a%$b==0;}"},
// {"language":"php","code":"<?php function toggleBit($n,$p){return $n^(1<<$p);}"},
// {"language":"php","code":"<?php function setBit($n,$p){return $n|(1<<$p);}"},
// {"language":"php","code":"<?php function clearBit($n,$p){return $n&~(1<<$p);}"},
// {"language":"php","code":"<?php function swap(&$a,&$b){$t=$a;$a=$b;$b=$t;}"},
// {"language":"php","code":"<?php function arraySum($a){return array_sum($a);}"},
// {"language":"php","code":"<?php function arrayMax($a){return max($a);}"},
// {"language":"php","code":"<?php function arrayMin($a){return min($a);}"},
// {"language":"php","code":"<?php function arrayAvg($a){return array_sum($a)/count($a);}"},
// {"language":"php","code":"<?php function arrayContains($a,$v){return in_array($v,$a);}"},
// {"language":"php","code":"<?php function arrayReverse($a){return array_reverse($a);}"},
// {"language":"php","code":"<?php function arrayCopy($a){return $a;}"},
// {"language":"php","code":"<?php function arrayEqual($a,$b){return $a==$b;}"},
// {"language":"php","code":"<?php function arrayUnique($a){return array_unique($a);}"},
// {"language":"php","code":"<?php function arrayMerge($a,$b){return array_merge($a,$b);}"},
// {"language":"c","code":"#include<stdio.h>\nint main(){printf(\"Hello World\");return 0;}"},
// {"language":"c","code":"int sum(int a,int b){return a+b;}"},
// {"language":"c","code":"int factorial(int n){return n<=1?1:n*factorial(n-1);}"},
// {"language":"c","code":"int isPrime(int n){if(n<2)return 0;for(int i=2;i*i<=n;i++)if(n%i==0)return 0;return 1;}"},
// {"language":"c","code":"int fibonacci(int n){return n<2?n:fibonacci(n-1)+fibonacci(n-2);}"},
// {"language":"c","code":"int max(int a,int b){return a>b?a:b;}"},
// {"language":"c","code":"int min(int a,int b){return a<b?a:b;}"},
// {"language":"c","code":"int abs(int x){return x<0?-x:x;}"},
// {"language":"c","code":"double circleArea(double r){return 3.14159*r*r;}"},
// {"language":"c","code":"int isLeap(int y){return y%4==0&&(y%100!=0||y%400==0);}"},
// {"language":"c","code":"int gcd(int a,int b){return b==0?a:gcd(b,a%b);}"},
// {"language":"c","code":"int lcm(int a,int b){return a*b/gcd(a,b);}"},
// {"language":"c","code":"int power(int b,int e){return e==0?1:b*power(b,e-1);}"},
// {"language":"c","code":"int sumDigits(int n){int s=0;while(n){s+=n%10;n/=10;}return s;}"},
// {"language":"c","code":"int reverse(int n){int r=0;while(n){r=r*10+n%10;n/=10;}return r;}"},
// {"language":"c","code":"int isPalindrome(int n){return n==reverse(n);}"},
// {"language":"c","code":"int countDigits(int n){int c=0;while(n){c++;n/=10;}return c;}"},
// {"language":"c","code":"int isArmstrong(int n){int s=0,t=n,d;while(t){d=t%10;s+=d*d*d;t/=10;}return s==n;}"},
// {"language":"c","code":"int productDigits(int n){int p=1;while(n){p*=n%10;n/=10;}return p;}"},
// {"language":"c","code":"int binaryToDecimal(int n){int d=0,p=1;while(n){d+=n%10*p;p*=2;n/=10;}return d;}"},
// {"language":"c","code":"int decimalToBinary(int n){int b=0,p=1;while(n){b+=n%2*p;p*=10;n/=2;}return b;}"},
// {"language":"c","code":"int isPerfectSquare(int n){int s=sqrt(n);return s*s==n;}"},
// {"language":"c","code":"int countSetBits(int n){int c=0;while(n){c+=n&1;n>>=1;}return c;}"},
// {"language":"c","code":"int sumNatural(int n){return n*(n+1)/2;}"},
// {"language":"c","code":"int sumEven(int n){return n*(n+1);}"},
// {"language":"c","code":"int sumOdd(int n){return n*n;}"},
// {"language":"c","code":"int sumSquares(int n){return n*(n+1)*(2*n+1)/6;}"},
// {"language":"c","code":"int sumCubes(int n){return n*n*(n+1)*(n+1)/4;}"},
// {"language":"c","code":"int lastDigit(int n){return abs(n)%10;}"},
// {"language":"c","code":"int firstDigit(int n){while(n>=10)n/=10;return n;}"},
// {"language":"c","code":"int isPowerOfTwo(int n){return n>0&&!(n&(n-1));}"},
// {"language":"c","code":"int countFactors(int n){int c=0;for(int i=1;i<=n;i++)if(n%i==0)c++;return c;}"},
// {"language":"c","code":"int isEven(int n){return n%2==0;}"},
// {"language":"c","code":"int isOdd(int n){return n%2!=0;}"},
// {"language":"c","code":"int isPositive(int n){return n>0;}"},
// {"language":"c","code":"int isNegative(int n){return n<0;}"},
// {"language":"c","code":"int isZero(int n){return n==0;}"},
// {"language":"c","code":"int isDivisible(int a,int b){return a%b==0;}"},
// {"language":"c","code":"int toggleBit(int n,int p){return n^(1<<p);}"},
// {"language":"c","code":"int setBit(int n,int p){return n|(1<<p);}"},
// {"language":"c","code":"int clearBit(int n,int p){return n&~(1<<p);}"},
// {"language":"c","code":"int swap(int*a,int*b){int t=*a;*a=*b;*b=t;}"},
// {"language":"c","code":"int arraySum(int a[],int n){int s=0;for(int i=0;i<n;i++)s+=a[i];return s;}"},
// {"language":"c","code":"int arrayMax(int a[],int n){int m=a[0];for(int i=1;i<n;i++)if(a[i]>m)m=a[i];return m;}"},
// {"language":"c","code":"int arrayMin(int a[],int n){int m=a[0];for(int i=1;i<n;i++)if(a[i]<m)m=a[i];return m;}"},
// {"language":"c","code":"int arrayAvg(int a[],int n){return arraySum(a,n)/n;}"},
// {"language":"c","code":"int arrayContains(int a[],int n,int v){for(int i=0;i<n;i++)if(a[i]==v)return 1;return 0;}"},
// {"language":"c","code":"int arrayReverse(int a[],int n){for(int i=0;i<n/2;i++)swap(&a[i],&a[n-i-1]);}"},
// {"language":"c","code":"int arrayCopy(int a[],int b[],int n){for(int i=0;i<n;i++)b[i]=a[i];}"},
// {"language":"c","code":"int arrayEqual(int a[],int b[],int n){for(int i=0;i<n;i++)if(a[i]!=b[i])return 0;return 1;}"},
// {"language":"ruby","code":"def sum(a,b); a+b; end"},
// {"language":"ruby","code":"def factorial(n); n<=1 ? 1 : n*factorial(n-1); end"},
// {"language":"ruby","code":"def is_prime(n); return false if n<2; (2..Math.sqrt(n)).none?{|i| n%i==0}; end"},
// {"language":"ruby","code":"def fibonacci(n); n<2 ? n : fibonacci(n-1)+fibonacci(n-2); end"},
// {"language":"ruby","code":"def max(a,b); a>b ? a : b; end"},
// {"language":"ruby","code":"def min(a,b); a<b ? a : b; end"},
// {"language":"ruby","code":"def abs(x); x<0 ? -x : x; end"},
// {"language":"ruby","code":"def circle_area(r); Math::PI*r*r; end"},
// {"language":"ruby","code":"def is_leap(y); y%4==0 && (y%100!=0 || y%400==0); end"},
// {"language":"ruby","code":"def gcd(a,b); b==0 ? a : gcd(b,a%b); end"},
// {"language":"ruby","code":"def lcm(a,b); a*b/gcd(a,b); end"},
// {"language":"ruby","code":"def power(b,e); e==0 ? 1 : b*power(b,e-1); end"},
// {"language":"ruby","code":"def sum_digits(n); n.to_s.chars.map(&:to_i).sum; end"},
// {"language":"ruby","code":"def reverse(n); n.to_s.reverse.to_i; end"},
// {"language":"ruby","code":"def is_palindrome(n); n.to_s==n.to_s.reverse; end"},
// {"language":"ruby","code":"def count_digits(n); n.to_s.length; end"},
// {"language":"ruby","code":"def is_armstrong(n); n==n.to_s.chars.sum{|c| c.to_i**3}; end"},
// {"language":"ruby","code":"def product_digits(n); n.to_s.chars.map(&:to_i).reduce(:*); end"},
// {"language":"ruby","code":"def binary_to_decimal(b); b.to_i(2); end"},
// {"language":"ruby","code":"def decimal_to_binary(d); d.to_s(2); end"},
// {"language":"ruby","code":"def is_perfect_square(n); s=Math.sqrt(n).to_i; s*s==n; end"},
// {"language":"ruby","code":"def count_set_bits(n); n.to_s(2).count('1'); end"},
// {"language":"ruby","code":"def sum_natural(n); n*(n+1)/2; end"},
// {"language":"ruby","code":"def sum_even(n); n*(n+1); end"},
// {"language":"ruby","code":"def sum_odd(n); n*n; end"},
// {"language":"ruby","code":"def sum_squares(n); n*(n+1)*(2*n+1)/6; end"},
// {"language":"ruby","code":"def sum_cubes(n); n*n*(n+1)*(n+1)/4; end"},
// {"language":"ruby","code":"def last_digit(n); n.abs%10; end"},
// {"language":"ruby","code":"def first_digit(n); n.abs.to_s[0].to_i; end"},
// {"language":"ruby","code":"def is_power_of_two(n); n>0 && (n&(n-1))==0; end"},
// {"language":"ruby","code":"def count_factors(n); (1..n).count{|i| n%i==0}; end"},
// {"language":"ruby","code":"def is_even(n); n%2==0; end"},
// {"language":"ruby","code":"def is_odd(n); n%2!=0; end"},
// {"language":"ruby","code":"def is_positive(n); n>0; end"},
// {"language":"ruby","code":"def is_negative(n); n<0; end"},
// {"language":"ruby","code":"def is_zero(n); n==0; end"},
// {"language":"ruby","code":"def is_divisible(a,b); a%b==0; end"},
// {"language":"ruby","code":"def toggle_bit(n,p); n^(1<<p); end"},
// {"language":"ruby","code":"def set_bit(n,p); n|(1<<p); end"},
// {"language":"ruby","code":"def clear_bit(n,p); n&~(1<<p); end"},
// {"language":"ruby","code":"def swap(a,b); a,b=b,a; [a,b]; end"},
// {"language":"ruby","code":"def array_sum(a); a.sum; end"},
// {"language":"ruby","code":"def array_max(a); a.max; end"},
// {"language":"ruby","code":"def array_min(a); a.min; end"},
// {"language":"ruby","code":"def array_avg(a); a.sum/a.size; end"},
// {"language":"ruby","code":"def array_contains(a,v); a.include?(v); end"},
// {"language":"ruby","code":"def array_reverse(a); a.reverse; end"},
// {"language":"ruby","code":"def array_copy(a); a.dup; end"},
// {"language":"ruby","code":"def array_equal(a,b); a==b; end"},
// {"language":"ruby","code":"def array_unique(a); a.uniq; end"},
// {"language":"ruby","code":"def array_merge(a,b); a+b; end"},
// {"language":"rust","code":"fn sum(a:i32,b:i32)->i32{a+b}"},
// {"language":"rust","code":"fn factorial(n:u32)->u32{if n<=1{1}else{n*factorial(n-1)}}"},
// {"language":"rust","code":"fn is_prime(n:u32)->bool{if n<2{false}else{for i in 2..=n/2{if n%i==0{return false}}true}}"},
// {"language":"rust","code":"fn fibonacci(n:u32)->u32{if n<2{n}else{fibonacci(n-1)+fibonacci(n-2)}}"},
// {"language":"rust","code":"fn max(a:i32,b:i32)->i32{if a>b{a}else{b}}"},
// {"language":"rust","code":"fn min(a:i32,b:i32)->i32{if a<b{a}else{b}}"},
// {"language":"rust","code":"fn abs(x:i32)->i32{if x<0{-x}else{x}}"},
// {"language":"rust","code":"fn circle_area(r:f64)->f64{std::f64::consts::PI*r*r}"},
// {"language":"rust","code":"fn is_leap(y:u32)->bool{y%4==0&&(y%100!=0||y%400==0)}"},
// {"language":"rust","code":"fn gcd(a:u32,b:u32)->u32{if b==0{a}else{gcd(b,a%b)}}"},
// {"language":"rust","code":"fn lcm(a:u32,b:u32)->u32{a*b/gcd(a,b)}"},
// {"language":"rust","code":"fn power(b:u32,e:u32)->u32{if e==0{1}else{b*power(b,e-1)}}"},
// {"language":"rust","code":"fn sum_digits(mut n:u32)->u32{let mut s=0;while n>0{s+=n%10;n/=10}s}"},
// {"language":"rust","code":"fn reverse(mut n:u32)->u32{let mut r=0;while n>0{r=r*10+n%10;n/=10}r}"},
// {"language":"rust","code":"fn is_palindrome(n:u32)->bool{n==reverse(n)}"},
// {"language":"rust","code":"fn count_digits(mut n:u32)->usize{n.to_string().len()}"},
// {"language":"rust","code":"fn is_armstrong(n:u32)->bool{let s=n.to_string().chars().map(|c|c.to_digit(10).unwrap().pow(3)).sum();s==n}"},
// {"language":"rust","code":"fn product_digits(mut n:u32)->u32{let mut p=1;while n>0{p*=n%10;n/=10}p}"},
// {"language":"rust","code":"fn binary_to_decimal(b:&str)->u32{u32::from_str_radix(b,2).unwrap()}"},
// {"language":"rust","code":"fn decimal_to_binary(d:u32)->String{format!(\"{:b}\",d)}"},
// {"language":"rust","code":"fn is_perfect_square(n:u32)->bool{let s=(n as f64).sqrt() as u32;s*s==n}"},
// {"language":"rust","code":"fn count_set_bits(n:u32)->u32{n.count_ones()}"},
// {"language":"rust","code":"fn sum_natural(n:u32)->u32{n*(n+1)/2}"},
// {"language":"rust","code":"fn sum_even(n:u32)->u32{n*(n+1)}"},
// {"language":"rust","code":"fn sum_odd(n:u32)->u32{n*n}"},
// {"language":"rust","code":"fn sum_squares(n:u32)->u32{n*(n+1)*(2*n+1)/6}"},
// {"language":"rust","code":"fn sum_cubes(n:u32)->u32{n*n*(n+1)*(n+1)/4}"},
// {"language":"rust","code":"fn last_digit(n:i32)->i32{n.abs()%10}"},
// {"language":"rust","code":"fn first_digit(mut n:i32)->i32{while n>=10{n/=10}n.abs()}"},
// {"language":"rust","code":"fn is_power_of_two(n:u32)->bool{n>0&&(n&(n-1))==0}"},
// {"language":"rust","code":"fn count_factors(n:u32)->u32{(1..=n).filter(|i|n%i==0).count() as u32}"},
// {"language":"rust","code":"fn is_even(n:i32)->bool{n%2==0}"},
// {"language":"rust","code":"fn is_odd(n:i32)->bool{n%2!=0}"},
// {"language":"rust","code":"fn is_positive(n:i32)->bool{n>0}"},
// {"language":"rust","code":"fn is_negative(n:i32)->bool{n<0}"},
// {"language":"rust","code":"fn is_zero(n:i32)->bool{n==0}"},
// {"language":"rust","code":"fn is_divisible(a:i32,b:i32)->bool{a%b==0}"},
// {"language":"rust","code":"fn toggle_bit(n:u32,p:u32)->u32{n^(1<<p)}"},
// {"language":"rust","code":"fn set_bit(n:u32,p:u32)->u32{n|(1<<p)}"},
// {"language":"rust","code":"fn clear_bit(n:u32,p:u32)->u32{n&!(1<<p)}"},
// {"language":"rust","code":"fn swap(a:&mut i32,b:&mut i32){std::mem::swap(a,b)}"},
// {"language":"rust","code":"fn array_sum(a:&[i32])->i32{a.iter().sum()}"},
// {"language":"rust","code":"fn array_max(a:&[i32])->i32{*a.iter().max().unwrap()}"},
// {"language":"rust","code":"fn array_min(a:&[i32])->i32{*a.iter().min().unwrap()}"},
// {"language":"rust","code":"fn array_avg(a:&[i32])->i32{a.iter().sum::<i32>()/a.len() as i32}"},
// {"language":"rust","code":"fn array_contains(a:&[i32],v:i32)->bool{a.contains(&v)}"},
// {"language":"rust","code":"fn array_reverse(a:&mut [i32]){a.reverse()}"},
// {"language":"rust","code":"fn array_copy(a:&[i32])->Vec<i32>{a.to_vec()}"},
// {"language":"rust","code":"fn array_equal(a:&[i32],b:&[i32])->bool{a==b}"},
// {"language":"rust","code":"fn array_unique(a:&[i32])->Vec<i32>{let mut v=a.to_vec();v.dedup();v}"},
// {"language":"rust","code":"fn array_merge(a:&[i32],b:&[i32])->Vec<i32>{[a,b].concat()}"},
// {"language":"kotlin","code":"fun sum(a:Int,b:Int):Int=a+b"},
// {"language":"kotlin","code":"fun factorial(n:Int):Int=if(n<=1)1 else n*factorial(n-1)"},
// {"language":"kotlin","code":"fun isPrime(n:Int):Boolean=if(n<2)false else(2..n/2).none{n%it==0}"},
// {"language":"kotlin","code":"fun fibonacci(n:Int):Int=if(n<2)n else fibonacci(n-1)+fibonacci(n-2)"},
// {"language":"kotlin","code":"fun max(a:Int,b:Int):Int=if(a>b)a else b"},
// {"language":"kotlin","code":"fun min(a:Int,b:Int):Int=if(a<b)a else b"},
// {"language":"kotlin","code":"fun abs(x:Int):Int=if(x<0)-x else x"},
// {"language":"kotlin","code":"fun circleArea(r:Double):Double=Math.PI*r*r"},
// {"language":"kotlin","code":"fun isLeap(y:Int):Boolean=y%4==0&&(y%100!=0||y%400==0)"},
// {"language":"kotlin","code":"fun gcd(a:Int,b:Int):Int=if(b==0)a else gcd(b,a%b)"},
// {"language":"kotlin","code":"fun lcm(a:Int,b:Int):Int=a*b/gcd(a,b)"},
// {"language":"kotlin","code":"fun power(b:Int,e:Int):Int=if(e==0)1 else b*power(b,e-1)"},
// {"language":"kotlin","code":"fun sumDigits(n:Int):Int=n.toString().sumBy{it-'0'}"},
// {"language":"kotlin","code":"fun reverse(n:Int):Int=n.toString().reversed().toInt()"},
// {"language":"kotlin","code":"fun isPalindrome(n:Int):Boolean=n.toString()==n.toString().reversed()"},
// {"language":"kotlin","code":"fun countDigits(n:Int):Int=n.toString().length"},
// {"language":"kotlin","code":"fun isArmstrong(n:Int):Boolean=n==n.toString().sumBy{(it-'0').toDouble().pow(3).toInt()}"},
// {"language":"kotlin","code":"fun productDigits(n:Int):Int=n.toString().fold(1){p,c->p*(c-'0')}"},
// {"language":"kotlin","code":"fun binaryToDecimal(b:String):Int=b.toInt(2)"},
// {"language":"kotlin","code":"fun decimalToBinary(d:Int):String=Integer.toBinaryString(d)"},
// {"language":"kotlin","code":"fun isPerfectSquare(n:Int):Boolean{val s=Math.sqrt(n.toDouble()).toInt();return s*s==n}"},
// {"language":"kotlin","code":"fun countSetBits(n:Int):Int=Integer.bitCount(n)"},
// {"language":"kotlin","code":"fun sumNatural(n:Int):Int=n*(n+1)/2"},
// {"language":"kotlin","code":"fun sumEven(n:Int):Int=n*(n+1)"},
// {"language":"kotlin","code":"fun sumOdd(n:Int):Int=n*n"},
// {"language":"kotlin","code":"fun sumSquares(n:Int):Int=n*(n+1)*(2*n+1)/6"},
// {"language":"kotlin","code":"fun sumCubes(n:Int):Int=n*n*(n+1)*(n+1)/4"},
// {"language":"kotlin","code":"fun lastDigit(n:Int):Int=Math.abs(n)%10"},
// {"language":"kotlin","code":"fun firstDigit(n:Int):Int=n.toString()[0]-'0'"},
// {"language":"kotlin","code":"fun isPowerOfTwo(n:Int):Boolean=n>0&&(n and(n-1))==0"},
// {"language":"kotlin","code":"fun countFactors(n:Int):Int=(1..n).count{n%it==0}"},
// {"language":"kotlin","code":"fun isEven(n:Int):Boolean=n%2==0"},
// {"language":"kotlin","code":"fun isOdd(n:Int):Boolean=n%2!=0"},
// {"language":"kotlin","code":"fun isPositive(n:Int):Boolean=n>0"},
// {"language":"kotlin","code":"fun isNegative(n:Int):Boolean=n<0"},
// {"language":"kotlin","code":"fun isZero(n:Int):Boolean=n==0"},
// {"language":"kotlin","code":"fun isDivisible(a:Int,b:Int):Boolean=a%b==0"},
// {"language":"kotlin","code":"fun toggleBit(n:Int,p:Int):Int=n xor(1 shl p)"},
// {"language":"kotlin","code":"fun setBit(n:Int,p:Int):Int=n or(1 shl p)"},
// {"language":"kotlin","code":"fun clearBit(n:Int,p:Int):Int=n and(1 shl p).inv()"},
// {"language":"kotlin","code":"fun swap(a:Int,b:Int):Pair<Int,Int>=Pair(b,a)"},
// {"language":"kotlin","code":"fun arraySum(a:IntArray):Int=a.sum()"},
// {"language":"kotlin","code":"fun arrayMax(a:IntArray):Int=a.max()?:0"},
// {"language":"kotlin","code":"fun arrayMin(a:IntArray):Int=a.min()?:0"},
// {"language":"kotlin","code":"fun arrayAvg(a:IntArray):Int=a.average().toInt()"},
// {"language":"kotlin","code":"fun arrayContains(a:IntArray,v:Int):Boolean=a.contains(v)"},
// {"language":"kotlin","code":"fun arrayReverse(a:IntArray):IntArray=a.reversedArray()"},
// {"language":"kotlin","code":"fun arrayCopy(a:IntArray):IntArray=a.copyOf()"},
// {"language":"kotlin","code":"fun arrayEqual(a:IntArray,b:IntArray):Boolean=a.contentEquals(b)"},
// {"language":"kotlin","code":"fun arrayUnique(a:IntArray):IntArray=a.distinct().toIntArray()"},
// {"language":"kotlin","code":"fun arrayMerge(a:IntArray,b:IntArray):IntArray=a+b"},
{"language":"swift","code":"func reverseWords(_ str: String) -> String { return str.split(separator: \" \").reversed().joined(separator: \" \") }"},
{"language":"swift","code":"func isSorted(_ arr: [Int]) -> Bool { return arr == arr.sorted() }"},
{"language":"swift","code":"func countVowels(_ s: String) -> Int { return s.lowercased().filter(\"aeiou\".contains).count }"},
{"language":"swift","code":"func median(_ arr: [Double]) -> Double { let sorted = arr.sorted(); let count = sorted.count; return count % 2 == 0 ? (sorted[count/2] + sorted[count/2 - 1]) / 2 : sorted[count/2] }"},
{"language":"swift","code":"func shuffle<T>(_ array: [T]) -> [T] { var arr = array; for i in arr.indices.reversed() { let j = Int.random(in: 0...i); arr.swapAt(i, j) }; return arr }"},
{"language":"swift","code":"func countWords(_ s: String) -> Int { return s.split(separator: \" \").count }"},
{"language":"swift","code":"func longestWord(_ s: String) -> String { return s.split(separator: \" \").max(by: { $0.count < $1.count }) ?? \"\" }"},
{"language":"swift","code":"func sumDigits(_ n: Int) -> Int { return String(n).compactMap { Int(String($0)) }.reduce(0, +) }"},
{"language":"swift","code":"func toTitleCase(_ s: String) -> String { return s.split(separator: \" \").map { $0.prefix(1).uppercased() + $0.dropFirst().lowercased() }.joined(separator: \" \") }"},
{"language":"swift","code":"func isSubsequence(_ s: String, _ t: String) -> Bool { var i = s.startIndex; for c in t { if i == s.endIndex { break }; if s[i] == c { i = s.index(after: i) } }; return i == s.endIndex }"},
{"language":"swift","code":"func countOccurrences<T: Equatable>(_ arr: [T], value: T) -> Int { return arr.filter { $0 == value }.count }"},
{"language":"swift","code":"func chunkArray<T>(_ arr: [T], size: Int) -> [[T]] { return stride(from: 0, to: arr.count, by: size).map { Array(arr[$0..<min($0+size, arr.count)]) }"},
{"language":"swift","code":"func flattenOnce<T>(_ arr: [Any]) -> [T] { return arr.compactMap { $0 as? T }"},
{"language":"swift","code":"func runningSum(_ nums: [Int]) -> [Int] { var total = 0; return nums.map { total += $0; return total }"},
{"language":"swift","code":"func combine<T>(_ a: [T], _ b: [T]) -> [T] { return Array(Set(a + b)) }"},
{"language":"swift","code":"func minMax(_ arr: [Int]) -> (Int, Int)? { guard let min = arr.min(), let max = arr.max() else { return nil }; return (min, max) }"},
{"language":"swift","code":"func isAllUnique<T: Hashable>(_ array: [T]) -> Bool { return Set(array).count == array.count }"},
{"language":"swift","code":"func groupByFirstLetter(_ arr: [String]) -> [Character: [String]] { return Dictionary(grouping: arr) { $0.first! }"},
{"language":"swift","code":"func capitalizeSentences(_ str: String) -> String { return str.split(separator: \".\").map { $0.trimmingCharacters(in: .whitespaces).capitalized }.joined(separator: \". \") }"},
{"language":"swift","code":"func randomString(length: Int) -> String { let chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"; return String((0..<length).map{ _ in chars.randomElement()! }) }"},
{"language":"swift","code":"func sumMatrix(_ matrix: [[Int]]) -> Int { return matrix.flatMap { $0 }.reduce(0, +) }"},
{"language":"swift","code":"func zipArrays<T, U>(_ a: [T], _ b: [U]) -> [(T, U)] { return Array(zip(a, b)) }"},
{"language":"swift","code":"func findDuplicates<T: Hashable>(_ arr: [T]) -> [T] { var seen = Set<T>(), dupes = Set<T>(); for val in arr { if !seen.insert(val).inserted { dupes.insert(val) } }; return Array(dupes) }"},
{"language":"swift","code":"func parseCSV(_ input: String) -> [[String]] { return input.split(separator: \"\\n\").map { $0.split(separator: \",\").map(String.init) }"},
{"language":"swift","code":"func isPerfectSquare(_ n: Int) -> Bool { let root = Int(Double(n).squareRoot()); return root * root == n }"},
{"language":"swift","code":"func uniqueCharacters(_ str: String) -> String { var seen = Set<Character>(); return str.filter { seen.insert($0).inserted }"},
{"language":"swift","code":"func nthLargest(_ arr: [Int], n: Int) -> Int? { let sorted = arr.sorted(by: >); return n <= sorted.count ? sorted[n - 1] : nil }"},
{"language":"swift","code":"func matrixTranspose(_ matrix: [[Int]]) -> [[Int]] { guard !matrix.isEmpty else { return [] }; return (0..<matrix[0].count).map { i in matrix.map { $0[i] } }"},
{"language":"swift","code":"func commonElements<T: Hashable>(_ a: [T], _ b: [T]) -> [T] { let setA = Set(a), setB = Set(b); return Array(setA.intersection(setB)) }"},
{"language":"swift","code":"func countBy<T>(_ arr: [T], key: (T) -> String) -> [String: Int] { return Dictionary(grouping: arr, by: key).mapValues { $0.count }"},
{"language":"swift","code":"func padString(_ str: String, to length: Int) -> String { return str + String(repeating: \" \", count: max(0, length - str.count)) }"},
{"language":"swift","code":"func findPairsWithSum(_ arr: [Int], _ target: Int) -> [(Int, Int)] { var seen = Set<Int>(), res = [(Int, Int)](); for x in arr { if seen.contains(target - x) { res.append((x, target - x)) }; seen.insert(x) }; return res }"},
{"language":"swift","code":"func decodeROT13(_ input: String) -> String { return String(input.unicodeScalars.map { scalar in let base = scalar.value >= 97 ? 97 : 65; return Character(UnicodeScalar((scalar.value - base + 13) % 26 + base)!) })"},
{"language":"swift","code":"func flattenDeep<T>(_ array: [Any]) -> [T] { var result: [T] = []; for item in array { if let subArray = item as? [Any] { result += flattenDeep(subArray) } else if let value = item as? T { result.append(value) } }; return result }"},
{"language":"swift","code":"func toCamelCase(_ str: String) -> String { let words = str.components(separatedBy: CharacterSet.alphanumerics.inverted); guard let first = words.first else { return \"\" }; return ([first.lowercased()] + words.dropFirst().map { $0.capitalized }).joined() }"},
{"language":"swift","code":"func digitSum(_ n: Int) -> Int { return String(n).compactMap { Int(String($0)) }.reduce(0, +) }"},
{"language":"swift","code":"func maxFrequency<T: Hashable>(_ arr: [T]) -> T? { let counts = arr.reduce(into: [:]) { $0[$1, default: 0] += 1 }; return counts.max { $0.value < $1.value }?.key"},
{"language":"swift","code":"func binaryToDecimal(_ binary: String) -> Int { return Int(binary, radix: 2) ?? 0 }"},
{"language":"swift","code":"func decimalToBinary(_ n: Int) -> String { return String(n, radix: 2) }"},
{"language":"swift","code":"func isPowerOfTwo(_ n: Int) -> Bool { return n > 0 && (n & (n - 1)) == 0 }"},
{"language":"swift","code":"func frequencyMap<T: Hashable>(_ arr: [T]) -> [T: Int] { return arr.reduce(into: [:]) { $0[$1, default: 0] += 1 }"},
{"language":"swift","code":"func zipLongest<T, U>(_ a: [T], _ b: [U]) -> [(T?, U?)] { let maxLen = max(a.count, b.count); return (0..<maxLen).map { ($0 < a.count ? a[$0] : nil, $0 < b.count ? b[$0] : nil) }"},
{"language":"swift","code":"func sumEvenIndexed(_ arr: [Int]) -> Int { return arr.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }.reduce(0, +) }"},
{"language":"swift","code":"func stringToAscii(_ str: String) -> [Int] { return str.unicodeScalars.map { Int($0.value) }"},
{"language":"swift","code":"func asciiToString(_ codes: [Int]) -> String { return String(codes.compactMap { UnicodeScalar($0).map(Character.init) })"},
{"language":"swift","code":"func reverseInt(_ n: Int) -> Int { return Int(String(String(n).reversed())) ?? 0 }"},
{"language":"swift","code":"func trimAndLowercase(_ str: String) -> String { return str.trimmingCharacters(in: .whitespacesAndNewlines).lowercased() }"},
{"language":"swift","code":"func removeWhitespace(_ str: String) -> String { return str.filter { !$0.isWhitespace }"},
{"language":"sql","code":"SELECT department, COUNT(*) AS employee_count FROM employees GROUP BY department HAVING COUNT(*) > 5 ORDER BY employee_count DESC;"},
{"language":"sql","code":"SELECT customer_id, SUM(amount) AS total_spent FROM orders WHERE order_date >= '2024-01-01' GROUP BY customer_id ORDER BY total_spent DESC;"},
{"language":"sql","code":"SELECT name FROM products WHERE price = (SELECT MAX(price) FROM products WHERE category = 'electronics');"},
{"language":"sql","code":"SELECT e.name, d.name AS department FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'New York';"},
{"language":"sql","code":"SELECT name FROM users WHERE id NOT IN (SELECT user_id FROM orders WHERE order_date > CURRENT_DATE - INTERVAL '6 months');"},
{"language":"sql","code":"SELECT name, salary FROM employees WHERE salary > (SELECT AVG(salary) FROM employees) ORDER BY salary DESC LIMIT 10;"},
{"language":"sql","code":"SELECT EXTRACT(YEAR FROM birth_date) AS birth_year, COUNT(*) FROM users GROUP BY birth_year ORDER BY birth_year;"},
{"language":"sql","code":"SELECT product_id, COUNT(*) AS sales_count FROM order_items GROUP BY product_id ORDER BY sales_count DESC LIMIT 5;"},
{"language":"sql","code":"SELECT DISTINCT ON (user_id) user_id, order_date FROM orders ORDER BY user_id, order_date DESC;"},
{"language":"sql","code":"SELECT customer_id, COUNT(DISTINCT product_id) AS unique_products FROM order_items GROUP BY customer_id ORDER BY unique_products DESC;"},
{"language":"sql","code":"SELECT u.name, COUNT(p.id) FROM users u LEFT JOIN posts p ON u.id = p.user_id GROUP BY u.name ORDER BY COUNT(p.id) DESC;"},
{"language":"sql","code":"SELECT author, COUNT(*) AS post_count FROM posts WHERE created_at >= NOW() - INTERVAL '30 days' GROUP BY author ORDER BY post_count DESC;"},
{"language":"sql","code":"SELECT category, AVG(price) FROM products GROUP BY category HAVING AVG(price) > 100 ORDER BY AVG(price) DESC;"},
{"language":"sql","code":"SELECT region, COUNT(*) FROM customers WHERE active = true GROUP BY region ORDER BY COUNT(*) DESC;"},
{"language":"sql","code":"SELECT DATE(order_date) AS day, SUM(amount) AS total FROM orders WHERE order_date >= NOW() - INTERVAL '7 days' GROUP BY day ORDER BY day;"},
{"language":"sql","code":"SELECT employee_id, department_id FROM employees WHERE salary = (SELECT MAX(salary) FROM employees);"},
{"language":"sql","code":"SELECT customer_id FROM orders GROUP BY customer_id HAVING SUM(total_amount) > 5000 ORDER BY SUM(total_amount) DESC;"},
{"language":"sql","code":"SELECT department, ROUND(AVG(salary),2) AS avg_salary FROM employees GROUP BY department ORDER BY avg_salary DESC;"},
{"language":"sql","code":"SELECT p.name, o.quantity FROM products p INNER JOIN order_items o ON p.id = o.product_id WHERE o.quantity > 10;"},
{"language":"sql","code":"SELECT email FROM users WHERE created_at BETWEEN '2024-01-01' AND '2024-12-31' ORDER BY created_at DESC;"},
{"language":"sql","code":"SELECT category, MAX(price) AS max_price, MIN(price) AS min_price FROM products GROUP BY category ORDER BY category;"},
{"language":"sql","code":"SELECT customer_id, COUNT(*) AS order_count FROM orders GROUP BY customer_id HAVING COUNT(*) > 3 ORDER BY order_count DESC;"},
{"language":"sql","code":"SELECT u.username, COUNT(l.id) AS likes FROM users u JOIN likes l ON u.id = l.user_id GROUP BY u.username ORDER BY likes DESC;"},
{"language":"sql","code":"SELECT genre, COUNT(*) FROM books WHERE published_at >= '2020-01-01' GROUP BY genre ORDER BY COUNT(*) DESC;"},
{"language":"sql","code":"SELECT student_id, AVG(score) AS avg_score FROM exams GROUP BY student_id HAVING AVG(score) >= 75 ORDER BY avg_score DESC;"},
{"language":"sql","code":"SELECT p.title FROM posts p WHERE p.id IN (SELECT post_id FROM comments GROUP BY post_id HAVING COUNT(*) > 10);"},
{"language":"sql","code":"SELECT name FROM employees WHERE department_id = (SELECT id FROM departments WHERE name = 'Engineering');"},
{"language":"sql","code":"SELECT DATE(created_at) AS signup_day, COUNT(*) FROM users GROUP BY signup_day ORDER BY signup_day DESC LIMIT 7;"},
{"language":"sql","code":"SELECT customer_id, MAX(order_date) AS last_order FROM orders GROUP BY customer_id ORDER BY last_order DESC;"},
{"language":"sql","code":"SELECT product_id, SUM(quantity) AS total_sold FROM order_items GROUP BY product_id ORDER BY total_sold DESC LIMIT 10;"},
{"language":"sql","code":"SELECT city, COUNT(*) AS users FROM users GROUP BY city HAVING COUNT(*) > 100 ORDER BY users DESC;"},
{"language":"sql","code":"SELECT id, title FROM tasks WHERE status = 'pending' AND due_date < CURRENT_DATE ORDER BY due_date ASC;"},
{"language":"sql","code":"SELECT e.name FROM employees e JOIN salaries s ON e.id = s.employee_id WHERE s.amount = (SELECT MAX(amount) FROM salaries);"},
{"language":"sql","code":"SELECT department_id, COUNT(*) AS count FROM employees GROUP BY department_id HAVING COUNT(*) BETWEEN 5 AND 20;"},
{"language":"sql","code":"SELECT author_id, COUNT(*) AS posts FROM posts GROUP BY author_id ORDER BY posts DESC LIMIT 3;"},
{"language":"sql","code":"SELECT product_id FROM reviews GROUP BY product_id HAVING AVG(rating) >= 4 ORDER BY AVG(rating) DESC;"},
{"language":"sql","code":"SELECT COUNT(*) AS overdue FROM tasks WHERE status != 'completed' AND due_date < CURRENT_DATE;"},
{"language":"sql","code":"SELECT team, AVG(score) FROM matches WHERE season = '2024' GROUP BY team ORDER BY AVG(score) DESC;"},
{"language":"sql","code":"SELECT email FROM users WHERE email LIKE '%@example.com' ORDER BY created_at DESC LIMIT 20;"},
{"language":"sql","code":"SELECT p.name, COUNT(*) FROM orders o JOIN products p ON o.product_id = p.id GROUP BY p.name ORDER BY COUNT(*) DESC;"},
{"language":"sql","code":"SELECT c.name FROM courses c JOIN enrollments e ON c.id = e.course_id GROUP BY c.name HAVING COUNT(e.student_id) > 50;"},
{"language":"sql","code":"SELECT EXTRACT(MONTH FROM created_at) AS month, COUNT(*) FROM posts GROUP BY month ORDER BY month;"},
{"language":"sql","code":"SELECT user_id, SUM(duration) AS total_time FROM sessions GROUP BY user_id ORDER BY total_time DESC;"},
{"language":"sql","code":"SELECT name FROM employees WHERE id IN (SELECT manager_id FROM departments WHERE location = 'HQ');"},
{"language":"sql","code":"SELECT state, COUNT(*) AS count FROM users GROUP BY state ORDER BY count DESC LIMIT 5;"},
{"language":"sql","code":"SELECT product_id, ROUND(AVG(rating),2) AS avg_rating FROM reviews GROUP BY product_id ORDER BY avg_rating DESC;"},
{"language":"sql","code":"SELECT user_id, COUNT(*) AS login_count FROM logins WHERE login_time >= CURRENT_DATE - INTERVAL '30 days' GROUP BY user_id ORDER BY login_count DESC;"},
{"language":"sql","code":"SELECT store_id, SUM(sales) FROM daily_sales WHERE sale_date BETWEEN '2024-01-01' AND '2024-12-31' GROUP BY store_id ORDER BY SUM(sales) DESC;"},
{"language":"sql","code":"SELECT product_name, COUNT(*) AS review_count FROM reviews GROUP BY product_name ORDER BY review_count DESC LIMIT 10;"},
{"language":"sql","code":"SELECT u.name, COUNT(o.id) AS order_total FROM users u JOIN orders o ON u.id = o.customer_id GROUP BY u.name ORDER BY order_total DESC;"},
{"language":"sql","code":"SELECT department_id, ROUND(AVG(salary), 2) FROM employees GROUP BY department_id ORDER BY ROUND(AVG(salary), 2) DESC;"}


];

async function insertSnippets() {
  try {
    await client.connect();
    const db = client.db(dbName);
    const collection = db.collection('snippets');

    const existing = await collection.countDocuments();
      await collection.insertMany(snippets);
      console.log('Snippets inserted successfully');
    
  } catch (error) {
    console.error('Error inserting snippets:', error);
  } finally {
    await client.close();
  }
}

insertSnippets();
